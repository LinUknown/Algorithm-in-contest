/* 不相等时 dp[i][j] = max (dp[i][j-1] , dp[i-1][j]);
    相等时 dp[i][j] = dp[i-1][j-1] +1
*/

#include <iostream>
#include <bits/stdc++.h>

using namespace std;

const int maxn = 1000;
int dp[maxn][maxn];

int lcs(string x,string y)
{
    int xlen = x.size();
    int ylen = y.size();
    int max1 = 0;

    x = ' '+x ;
    y = ' '+y;
    for(int i=1;i<=xlen;i++)
        dp[i][0] = 0;

    for(int i=1;i<=ylen;i++)
        dp[0][i] = 0;

    for(int i=1;i<=xlen;i++)
    {
        for(int j=1;j<=ylen;j++)
        {
            if(x[i] == y[j])
                dp[i][j] = dp[i-1][j-1] +1;
            else dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);

            max1 = max(max1, dp[i][j]);
        }
    }
    return max1;
}
int main()
{


   string st1,st2;
   cin>>st1>>st2;
   cout<<lcs(st1,st2)<<endl;
    return 0;
}
